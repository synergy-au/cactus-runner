# This docker compose file is made to emulate the k8s-cluster/deploy-template/app-setup/cactus-teststack.yml
# as much as possible for testing without k8s.
# cactus component images versions are purposely hardcoded and expected to be updated as new stable versions
# are released.

x-envoy-common:
  environment: &common-env
    DATABASE_URL: "postgresql+asyncpg://test_user:test_pwd@cactus-envoy-db/test_db"
    CERT_HEADER: ssl-client-cert
    ENABLE_NOTIFICATIONS: "True"
    RABBIT_MQ_BROKER_URL: "amqp://guest:guest@rabbit-mq:5672"
    ALLOW_DEVICE_REGISTRATION: "True"

services:
  cactus-runner:
    image: ghcr.io/synergy-au/cactus-runner:22-synergy
    ports:
      - 127.0.0.1:8080:8080
    networks:
      - cactus-envoy-net
    volumes:
      - shared:/shared
    environment:
      - SERVER_URL=http://cactus-envoy:8000
      - DATABASE_URL=postgresql+psycopg://test_user:test_pwd@cactus-envoy-db/test_db
      - ENVOY_ADMIN_BASICAUTH_USERNAME=admin
      - ENVOY_ADMIN_BASICAUTH_PASSWORD=password
      - ENVOY_ADMIN_URL=http://cactus-envoy-admin:8001

  cactus-teststack-init:
    image: ghcr.io/synergy-au/cactus-teststack-init:22-synergy
    restart: "no"
    environment:
      - ENVOY_DATABASE_URL=postgresql://test_user:test_pwd@cactus-envoy-db/test_db
    networks:
      - cactus-envoy-net
    volumes:
      - shared:/shared

  rabbit-mq:
    image: rabbitmq:3-management
    ports:
      - 127.0.0.1:5672:5672
      - 127.0.0.1:15672:15672
    hostname: rabbit-mq
    restart: unless-stopped
    networks:
      - cactus-envoy-net
    healthcheck:
      test: rabbitmq-diagnostics -q check_running && rabbitmq-diagnostics -q check_local_alarms
      interval: 30s
      timeout: 30s
      retries: 5
      start_period: 20s
    depends_on:
      cactus-teststack-init:
        condition: service_completed_successfully

  taskiq-worker:
    image: ghcr.io/synergy-au/cactus-envoy:22-synergy
    environment:
      <<: *common-env
    command: taskiq worker envoy.notification.main:broker envoy.notification.task
    restart: unless-stopped
    networks:
      - cactus-envoy-net
    depends_on:
      rabbit-mq:
        condition: service_healthy
      cactus-teststack-init:
        condition: service_completed_successfully

  cactus-envoy:
    image: ghcr.io/synergy-au/cactus-envoy:22-synergy
    ports:
      - 127.0.0.1:8000:8000
    restart: unless-stopped
    networks:
      - cactus-envoy-net
    environment:
      <<: *common-env
      PORT: 8000
      APP_MODULE: envoy.server.main:app
    depends_on:
      cactus-envoy-db:
        condition: service_started
      rabbit-mq:
        condition: service_healthy
      cactus-teststack-init:
        condition: service_completed_successfully
    volumes:
      - shared:/shared

  cactus-envoy-admin:
    image: ghcr.io/synergy-au/cactus-envoy:22-synergy
    ports:
      - 127.0.0.1:8001:8001
    restart: unless-stopped
    networks:
      - cactus-envoy-net
    environment:
      <<: *common-env
      ADMIN_USERNAME: admin
      ADMIN_PASSWORD: password
      PORT: 8001
      APP_MODULE: envoy.admin.main:app
    depends_on:
      cactus-envoy-db:
        condition: service_started
      rabbit-mq:
        condition: service_healthy
      cactus-teststack-init:
        condition: service_completed_successfully

  # The db data is *not* persisted via a docker volume
  cactus-envoy-db:
    image: postgres:16
    ports:
      - 127.0.0.1:8003:5432
    networks:
      - cactus-envoy-net
    environment:
      - POSTGRES_USER=test_user
      - POSTGRES_PASSWORD=test_pwd
      - POSTGRES_DB=test_db
    tmpfs:
      - /var/lib/postgresql/data:rw,size=128m
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "test_user", "-d", "test_db" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s

networks:
  cactus-envoy-net:


volumes:
  shared:
    driver: local
    driver_opts:
      type: tmpfs
      device: tmpfs
